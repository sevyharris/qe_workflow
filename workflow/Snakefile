# comment
import os


configfile:
    '../config/config.yaml'

adlib_conda_env = config['adlib_conda_env']
adlib_cluster_env = config['adlib_cluster_env']
os.environ['ADLIB_ENV'] = adlib_cluster_env

envvars:
    'ADLIB_ENV',

metal = config['metal']
adsorbate = config['adsorbate']
site = config['site']
facet = '111'  # eventually load this from config, but for now, only support the 111 facet
system = '_'.join([metal + facet, adsorbate, site])


bulk_dir = os.path.join('..', 'results', 'metal', metal, 'bulk')
slab_dir = os.path.join('..', 'results', 'metal', metal, 'slab')
adsorbate_dir = os.path.join('..', 'results', 'adsorbate', adsorbate)
system_dir = os.path.join('..', 'results', 'system', system)
xyz_dir = os.path.join('..', 'resources', 'adsorbates')  # directory with adsorbate xyz files for initial guess of geometry

rule vc_relax:
    """Rule to run vc-relax to get bulk lattice constant for a metal
    """
    input:
        os.path.join('scripts', 'bulk', 'vc_relax.py')
    # output:
    #     os.path.join(bulk_dir, 'vc_relax', 'espresso.pwo')
    shell:
        """
        bash -ic '
        . $HOME/.bashrc # if not loaded automatically
        conda activate {adlib_conda_env}
        python {input} {bulk_dir}
        conda deactivate'
        """

# TODO make sure there is the option to just feed the lattice constant manually (maybe with config)
# try to read it from config, and if there is none, then read it from vc_relax
# coarse_lattice_constant_guess = 3.6
rule bulk_eos_coarse:
    """Rule to compute energy vs. lattice constant for bulk metal
    """
    input:
        os.path.join('scripts', 'bulk', 'eos_coarse.py')
    shell:
        """
        bash -c '
        . $HOME/.bashrc # if not loaded automatically
        conda activate {adlib_conda_env}
        python {input} {bulk_dir}
        conda deactivate'
        """

rule bulk_eos_fine:
    """Rule to compute energy vs. lattice constant for bulk metal
    """
    input:
        os.path.join('scripts', 'bulk', 'eos_fine.py')
    shell:
        """
        bash -c '
        . $HOME/.bashrc # if not loaded automatically
        conda activate {adlib_conda_env}
        python {input} {bulk_dir}
        conda deactivate'
        """

rule plot_eos_coarse:
    input:
        os.path.join('scripts', 'bulk', 'plot_eos.py')
    shell:
        """
        bash -c '
        . $HOME/.bashrc # if not loaded automatically
        conda activate {adlib_conda_env}
        python {input} {bulk_dir}/eos_coarse
        conda deactivate'
        """

rule plot_eos_fine:
    input:
        os.path.join('scripts', 'bulk', 'plot_eos.py')
    shell:
        """
        bash -c '
        . $HOME/.bashrc # if not loaded automatically
        conda activate {adlib_conda_env}
        python {input} {bulk_dir}/eos_fine
        conda deactivate'
        """

rule relax_adsorbate:
    """Rule to optimize an adsorbate

    run with:
    snakemake relax_adsorbate -c1 --config adsorbate=CO2
    """
    input:
        os.path.join('scripts', 'adsorbate', 'relax_ads.py')
    # output:
    #     os.path.join(adsorbate_dir, 'espresso.pwo')
    shell:
        """
        bash -c '
        . $HOME/.bashrc # if not loaded automatically
        conda activate {adlib_conda_env}
        python {input} {adsorbate_dir} {xyz_dir}
        conda deactivate'
        """

# do not set to a value unless you want to skip bulk_eos_fine step
lattice_constant_estimate = ''  # set to a value, like 3.6 to skip eos_fine
rule relax_slab:
    """Rule to optimize a metal slab

    run with:
    snakemake relax_slab -c1 --config metal=Cu
    """
    input:
        os.path.join('scripts', 'slab', 'relax_slab.py')
    # output:
    #     os.path.join(slab_dir, 'espresso.pwo')
    shell:
        """
        bash -c '
        . $HOME/.bashrc # if not loaded automatically
        conda activate {adlib_conda_env}
        python {input} {slab_dir} {lattice_constant_estimate}
        conda deactivate'
        """

slab_pwo = os.path.join(slab_dir, 'espresso.pwo'),
adsorbate_pwo = os.path.join(adsorbate_dir, 'espresso.pwo')
rule relax_system:
    """Rule to optimize a combined adsorbate-metal slab system

    run with:
    snakemake relax_system -c1 --config metal=Cu adsorbate=CO2
    """
    input:
        os.path.join('scripts', 'system', 'relax_system.py')
        # relax_system_script = os.path.join('scripts', 'system', 'relax_system.py')
    # output:
    #     os.path.join(system_dir, 'espresso.pwo')
    shell:
        """
        bash -c '
        . $HOME/.bashrc # if not loaded automatically
        conda activate {adlib_conda_env}
        python {input} {system_dir} {slab_pwo} {adsorbate_pwo}
        conda deactivate'
        """

# ################# Rules for checking convergence #####################
adsorbate_pwo = os.path.join(adsorbate_dir, 'espresso.pwo')
rule ads_vacuum_converge:
    input:
        os.path.join('scripts', 'adsorbate', 'vacuum_converge.py')
    shell:
        """
        bash -c '
        . $HOME/.bashrc # if not loaded automatically
        conda activate {adlib_conda_env}
        python {input} {adsorbate_dir} {adsorbate_pwo}
        conda deactivate'
        """

rule ads_ecutwfc_converge:
    input:
        os.path.join('scripts', 'adsorbate', 'ecutwfc_converge.py')
    shell:
        """
        bash -c '
        . $HOME/.bashrc # if not loaded automatically
        conda activate {adlib_conda_env}
        python {input} {adsorbate_dir} {adsorbate_pwo}
        conda deactivate'
        """
